<p class="mailpoet_error" data-error="user_no_list">
  <%= __('You need to specify at least 1 list.') %>
</p>

<ul id="mailpoet_list_selection" class="clearfix"></ul>

<div id="mailpoet_list_available_container">
  <h3><%= __('Select the list you want to add:') %></h3>

  <select class="mailpoet_list_available"></select>

  <a href="javascript:;" class="mailpoet_list_add"><span><%= __('Add') %></span></a>
</div>

<script type="text/javascript">
  <% autoescape false %>
  var selected_lists = {{#if params.values}}{{{ json_encode params.values }}}
    {{else}}{}{{/if}},
  available_lists = [
    <% for list in lists %>
      <%= list | json_encode %>,
    <% endfor %>
  ];
  <% endautoescape %>

  jQuery(function($) {
    $(function() {
      mailpoet_list_available_render();
      mailpoet_list_selection_render();

      setInputNames();

      // make list selection sortable
      Sortable.create('mailpoet_list_selection', {
        handles: $$('#mailpoet_list_selection .handle')
      });

      // add list
      $('.mailpoet_list_add').on('click', function() {
        // add currently selected list to the selection
        var selected_list = $('.mailpoet_list_available :selected');

        // add list to selection
        selected_lists.push({
          list: selected_list.val(),
          list_name: selected_list.text(),
          is_checked: 0
        });

        // remove list from available lists
        selected_list.remove();

        // render selection
        mailpoet_list_selection_render();

        setInputNames();
      });

      // remove list
      $('#mailpoet_list_selection').on('click', '.remove', function() {
        var element = $(this).parents('li');
        // remove currently selected list to the selection
        var selected_list = parseInt(element.data('list'), 10);

        // remove list from selection
        selected_lists = selected_lists.filter(function(list) {
          return (parseInt(list.id, 10) !== selected_list);
        });

        // remove element
        element.remove();

        // render available list
        mailpoet_list_available_render();

        setInputNames();
      });
    });

    function mailpoet_list_available_render() {
      // get selected lists ids
      var selected_lists_ids = selected_lists.map(function(list) { return parseInt(list.id, 10); });

      // clear available lists
      $('.mailpoet_list_available').html('');

      // display available lists
      $.each(available_lists, function(i, list) {
        if($.inArray(list.id, selected_lists_ids) < 0) {
          $('.mailpoet_list_available').append('<option value="'+list.id+'">'+list.name+'</option>');
        }
      });

      mailpoet_list_available_toggle();
    }

    function mailpoet_list_selection_render() {
      // list item template
      var template = Handlebars.compile($('#field_settings_list_selection_item').html());

      // update view
      $('#mailpoet_list_selection').html(template({ lists: selected_lists }));

      mailpoet_list_available_toggle();
    }

    function mailpoet_list_available_toggle() {
      // toggle visibility of available lists
      if($('.mailpoet_list_available option').length === 0) {
        $('#mailpoet_list_available_container').hide();
      } else {
        $('#mailpoet_list_available_container').show();
      }
    }

    function setInputNames() {
      $('#mailpoet_list_selection li').each(function(index, item) {
        $(item).find('.mailpoet_is_checked').attr('name', 'params[values]['+index+'][is_checked]');
        $(item).find('.mailpoet_list_id').attr('name', 'params[values]['+index+'][id]');
        $(item).find('.mailpoet_list_name').attr('name', 'params[values]['+index+'][name]');
      });
    }
  });
<{{!}}/script>